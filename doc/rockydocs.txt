*rockydocs.txt*            For NVIM v0.10.4           Last change: 2025 May 15

==============================================================================
Table of Contents                                *rockydocs-table-of-contents*

1. Introduction                                       |rockydocs-introduction|
  - Key Features                         |rockydocs-introduction-key-features|
2. Install                                                 |rockydocs-install|
  - Install with lazy.nvim          |rockydocs-install-install-with-lazy.nvim|
  - Install with rocks.nvim        |rockydocs-install-install-with-rocks.nvim|
3. Config                                                   |rockydocs-config|
  - mkdocs serve port                     |rockydocs-config-mkdocs-serve-port|
  - LSP availability                       |rockydocs-config-lsp-availability|
  - preserved_paths                         |rockydocs-config-preserved_paths|
4. RockyDocs Commands                           |rockydocs-rockydocs-commands|
  - Usage                                 |rockydocs-rockydocs-commands-usage|
5. PyVenv Commands                                 |rockydocs-pyvenv-commands|
  - Usage                                    |rockydocs-pyvenv-commands-usage|
6. Getting Started                                 |rockydocs-getting-started|
7. Creating the Environment               |rockydocs-creating-the-environment|
8. Help                                                       |rockydocs-help|

==============================================================================
1. Introduction                                       *rockydocs-introduction*

nvim-rockydocs is a Neovim plugin designed to facilitate the creation and
management of Rocky Linux pages within the Neovim environment. This plugin aims
to streamline the documentation process by providing features such as automated
documentation generation, syntax highlighting, and potentially integration with
other development tools.

The nvim-rockydocs plugin provides support for the mkdocs-material theme, which
is the default theme used in the Rocky Linux Documentation site. The
mkdocs-material theme supports a range of extended Markdown tags that provide
additional formatting and layout options. The nvim-rockydocs plugin provides
native support for the mkdocs-material theme, allowing contributors to use the
extended Markdown tags and features provided by the theme.


KEY FEATURES                             *rockydocs-introduction-key-features*

The nvim-rockydocs plugin provides a range of features to enhance documentation
management within Neovim:

- Visual Consistency
    - Provides a real-time preview that exactly matches the official Rocky
        Linux documentation style
    - Ensures visual alignment with the project’s design guidelines
    - Helps contributors understand how their content will appear in the final
        documentation
- Real-Time Rendering
    - Immediate visual feedback as you write
    - Allows instant verification of formatting, structure, and layout
    - Reduces back-and-forth between editing and final presentation
- Markdown Support
    - Seamless integration with Markdown syntax
    - Easy formatting of headings, lists, code blocks, and other documentation
        elements
    - Simplifies the documentation creation process
- Workflow Efficiency
    - Eliminates guesswork about final document appearance
    - Speeds up documentation writing and review processes
    - Reduces potential formatting errors
- Collaborative Editing Features
    - Helps maintain consistent documentation standards across contributors
    - Provides a uniform editing experience
    - Facilitates easier peer review and content validation


==============================================================================
2. Install                                                 *rockydocs-install*


INSTALL WITH LAZY.NVIM              *rockydocs-install-install-with-lazy.nvim*

Step 1: Add nvim-rockydocs to your lazy.nvim configuration

In your Neovim configuration file (usually `plugins/init.lua`), add the
following line to your _lazy.nvim_ setup:

>lua
    { 'ambaradan/nvim-rockydocs' }
<

This will tell lazy.nvim to install the nvim-rockydocs plugin from the
_ambaradan/nvim-rockydocs_ GitHub repository.

Step 2: Install nvim-rockydocs using lazy.nvim

Save your init.lua file and restart Neovim. Then, run the following command in
Neovim:

>text
    :Lazy sync
<

or

>text
    :Lazy install
<


INSTALL WITH ROCKS.NVIM            *rockydocs-install-install-with-rocks.nvim*

Rocks.nvim is a plugin manager for Neovim, built using Lua. It aims to provide
an efficient and easy-to-use way to manage plugins in your Neovim
configuration.

To install the nvim-rockydocs rock, run the following command in Neovim:

>text
    :Rocks install nvim-rockydocs dev
<

This will install the nvim-rockydocs rock and its dependencies.


==============================================================================
3. Config                                                   *rockydocs-config*

The nvim-rockydocs plugin utilizes Neovim’s packadd command to load its
dependencies and functionality on demand. This approach allows the plugin to be
loaded only when needed, reducing Neovim’s startup time and improving overall
performance.

The plugin’s entry point is located in the `plugin/nvim-rockydocs.vim` file,
which checks if the plugin has already been loaded and sets a flag to prevent
redundant loading. It then invokes a Lua function to set up the plugin’s
configuration.

The use of packadd by nvim-rockydocs eliminates the need for explicit
configuration with lazy.nvim. Users can simply install the plugin and start
using it without having to add any additional configuration to their lazy.nvim
setup.

NOTE: Note about the `packadd` feature The packadd command is a feature in
Neovim that allows users to load plugins on demand, rather than during Neovim
startup. This provides a more efficient and flexible way to manage plugins, as
it enables users to load only the plugins they need for a specific task or
project.


MKDOCS SERVE PORT                         *rockydocs-config-mkdocs-serve-port*

One of the key features of Mkdocs is the ability to serve your documentation
locally for preview and testing purposes. By default, Mkdocs serves the site on
port 8000. However, users may need to change this port due to various reasons
such as port conflicts or specific project requirements. To change the default
port used by Mkdocs when serving your documentation, you can specify the port
in the `require("rockydocs").setup()` function. This function is used to
configure nvim-rockydocs to allow setting the Mkdocs serve port.

Here is an example configuration snippet that demonstrates how to set the
Mkdocs serve port to 8001:

>lua
    -- Specify the port you want to use for mkdocs serve
    require("rockydocs").setup({ mkdocs_port = 8001, })
<

In this example, replace 8001 with the port number you wish to use. After
setting up nvim-rockydocs with this configuration, when you run the Mkdocs
server, it will use the specified port instead of the default port 8000.


LSP AVAILABILITY                           *rockydocs-config-lsp-availability*


  Language servers are external tools that provide features such as syntax
  checking, code completion, and debugging for a specific programming language.
The PATH environment variable is a crucial component in the plugin
nvim-rockydocs as it allows you to specify the location of the language server
executables within the virtual environment. This ensures that the plugin can
access and utilize the language servers during documentation generation,
providing accurate and up-to-date information for your projects.

When start the language server, nvim-rockydocs uses the PATH environment
variable to locate the language server executable. The plugin executes the
language server using the `vim.fn.system` function, which searches for the
executable in the directories specified in the PATH variable.


PRESERVED_PATHS                             *rockydocs-config-preserved_paths*

The preserved_paths option in configs.lua is used to specify a list of
directories that should be preserved in the PATH environment variable when
using nvim-rockydocs with a language server installed with _mason.nvim_.

The purpose of preserved_paths is to ensure that certain directories are always
included in the PATH environment variable, even when nvim-rockydocs is running.
This is useful when you have other tools or executables that need to be
accessed from the PATH environment variable. When nvim-rockydocs starts, it
sets the PATH environment variable to the value specified in the path option.
However, if preserved_paths is set, nvim-rockydocs will also append the
directories specified in preserved_paths to the PATH environment variable.

This ensures that the directories specified in preserved_paths are always
included in the PATH environment variable, even when nvim-rockydocs is running.
By using preserved_paths you can ensure that certain directories are always
included in the PATH environment variable, even when using nvim-rockydocs with
a language server installed with `mason.nvim`.


==============================================================================
4. RockyDocs Commands                           *rockydocs-rockydocs-commands*

The "nvim-rockydocs" plugin provides a set of commands under the "RockyDocs"
namespace, which are designed to streamline the documentation workflow for the
Rocky Linux Documentation Project. These commands are the primary features of
the plugin and are used to setup, serve, build, and browse the documentation
projects.

The following RockyDocs commands are available:

- RockyDocsSetup: This command sets up a new RockyDocs project by cloning
    the repository and installing the required dependencies. It checks if a
    virtual environment is active and installs the requirements using the pip
    package manager.
- RockyDocsServe: This command serves the documentation project using
    MkDocs. It activates the virtual environment, checks if MkDocs is installed,
    and starts the server in the background. The server can be stopped using the
    RockyDocsStop command.
- RockyDocsStop: This command stops the currently running MkDocs server.
- RockyDocsBuild: This command builds the documentation project using
    MkDocs. It activates the virtual environment, checks if MkDocs is installed,
    and builds the documentation.
- RockyDocsStatus: This command displays the status of the documentation
    project, including whether a virtual environment is active, whether MkDocs is
    installed, and whether the server is running.
- RockyDocsOpen: This command open the RockyDocs documentation in the
    default web browser. This command is a convenient way to preview the
    documentation while you’re working on it.


USAGE                                     *rockydocs-rockydocs-commands-usage*

To use these RockyDocs commands, you can execute them in Neovim using the
`:RockyDocs<Command>` syntax. For example:


                                                 *rockydocs-:RockyDocsSetup*


:RockyDocsSetup                        to set up a new RockyDocs project


                                                 *rockydocs-:RockyDocsServe*


:RockyDocsServe                        to serve the documentation project


                                                  *rockydocs-:RockyDocsOpen*


:RockyDocsOpen                         to browse the documentation project


                                                  *rockydocs-:RockyDocsStop*


:RockyDocsStop                         to stop the MkDocs server


                                                 *rockydocs-:RockyDocsBuild*


:RockyDocsBuild                        to build the documentation project



:RockyDocsStatus

:to display the project status

These RockyDocs commands provide a convenient way to manage documentation
projects for the Rocky Linux Documentation Project, making it easier to create,
edit, and deploy high-quality documentation.


==============================================================================
5. PyVenv Commands                                 *rockydocs-pyvenv-commands*

The "nvim-rockydocs" plugin provides a set of utility commands under the
"PyVenv" namespace, which are designed to manage Python virtual environments
directly within Neovim. These commands are not part of the main plugin
functionality but rather serve as auxiliary tools to support the plugin’s
primary features. PyVenv Commands

The following PyVenv commands are available as utilities in the
"nvim-rockydocs" plugin:

- PyVenvCreate: This command creates a new Python virtual environment for
    the current project. The environment is created using the python -m venv
    command, and the virtual environment directory is stored in the venvs_dir path
    specified in the plugin’s configuration.
- PyVenvActivate: This command activates the virtual environment for the
    current project. If the virtual environment does not exist, it will be created
    first. The VIRTUAL_ENV environment variable is set to the path of the active
    virtual environment, and the PATH environment variable is updated to
    prioritize the virtual environment’s bin directory.
- PyVenvDeactivate: This command deactivates the currently active virtual
    environment, restoring the original environment variables.
- PyVenvStatus: This command displays the status of the virtual environment,
    including whether it is active, the Python version, and the path to the
    virtual environment.
- PyVenvRemove: This command removes the virtual environment for the current
    project.


USAGE                                        *rockydocs-pyvenv-commands-usage*

To use these PyVenv commands, you can execute them in Neovim using the
`:PyVenv<Command>` syntax. For example:


                                                   *rockydocs-:PyVenvCreate*


:PyVenvCreate                          to create a new virtual environment


                                                 *rockydocs-:PyVenvActivate*


:PyVenvActivate                        to activate the virtual environment


                                               *rockydocs-:PyVenvDeactivate*


:PyVenvDeactivate                      to deactivate the virtual environment


                                                   *rockydocs-:PyVenvStatus*


:PyVenvStatus                          to display the virtual environment status


                                                   *rockydocs-:PyVenvRemove*


:PyVenvRemove                          to remove the virtual environment



These PyVenv commands provide a convenient way to manage Python virtual
environments directly within Neovim, making it easier to work with the
"nvim-rockydocs" plugin and other projects that require virtual environments.


==============================================================================
6. Getting Started                                 *rockydocs-getting-started*

The RockyDocs Neovim Plugin is engineered to streamline the process of managing
MkDocs-based documentation projects directly within the Neovim editor. This
plugin empowers contributors to create, serve, and build documentation content
efficiently, eliminating the need to switch between the editor and a terminal
for common documentation tasks.

Upon integrating RockyDocs into your workflow, you can easily create a new
virtual environment specific to Rocky Linux documentation project using the
:PyVenvCreate command. Once the virtual environment is established, activate it
with :PyVenvActivate, ensuring that all dependencies for MkDocs can be managed
effectively within that context. RockyDocs offers the command :RockyDocsSetup
to initialize your documentation project by cloning template files and
preparing the necessary structure.

The plugin enables to serve the documentation locally with the :RockyDocsServe
command. This command starts a MkDocs server, providing a live preview of the
new pages in a web browser. Users can also specify ports if needed while
accessing the server at the designated address.

In addition to serving documentation, RockyDocs allows for building static
documentation files through the :RockyDocsBuild command. This is especially
useful for deploying documentation once it has been finalized. Furthermore,
users can monitor the status of their MkDocs environment using the
:RockyDocsStatus command, which provides information about the active virtual
environment, MkDocs installation, and any running servers.

The RockyDocs Neovim Plugin significantly enhances the documentation workflow
for developers, offering powerful tools integrated within the Neovim interface,
thus improving the efficiency and ease of managing documentation projects.


==============================================================================
7. Creating the Environment               *rockydocs-creating-the-environment*

Creating a Rocky Linux documentation environment is a straightforward process
that involves a few key steps. Begin by setting up a dedicated project folder,
which will serve as the foundation for your documentation efforts. Next, launch
nvim, a powerful and flexible text editor, within this folder. From there,
create a Python virtual environment to isolate your project’s dependencies
and ensure seamless execution. Activate this environment to enable the
installation of necessary packages, including mkdocs and mkdocs-material, which
are essential for building and publishing your documentation. Once these
components are in place, verify that your setup is complete and functional by
running a status check.

By following these simple steps, you can quickly establish a robust and
efficient documentation environment using nvim-rockydocs.

**Step 1**: Create an empty Project Folder

To start, create an empty folder for your project. This folder will serve as
the root directory for your documentation environment. You can create the
folder using the `mkdir` command in the terminal:

>bash
    mkdir my-rocky-docs
<

Replace my-rocky-docs with the name of your choice for the project folder.

**Step 2**: Navigate into the Project Folder and launch nvim

Navigate into the newly created project folder and launch nvim:

>bash
    cd my-rocky-docs nvim
<

This will open nvim in the project folder, ready for further setup.

**Step 3**: Create a Python Virtual Environment

Use PyVenvCreate to create a Python virtual environment within your project
folder. This ensures that your documentation environment’s dependencies do
not conflict with the system-wide Python environment:

>text
    :PyVenCreate
<

This command creates a virtual environment named `.venv` in your project
folder.

**Step 4**: Activate the Virtual Environment

Activate the virtual environment using PyVenvActivate. This step is crucial as
it allows you to install packages specific to your project without affecting
the system Python environment:

>text
    :PyVenvActivate
<

**Step 5**: Install Necessary Packages and Prepare the Project Structure

With the virtual environment activated, use RockyDocsSetup to install mkdocs
and mkdocs-material using Python pip, and prepare the basic structure for your
documentation project:

>text
    :RockyDocsSetup
<

This command installs the required packages and sets up the initial directory
structure for your documentation project, including the basic configuration for
mkdocs in `mkdocs.yml`.

**Step 6**: Check the Status of the Setup

Finally, to ensure that everything is correctly set up and ready for use, run
the RockyDocsStatus command:

>text
    :RockyDocsStatus
<

This command checks the environment, virtual environment, installed packages,
and project structure, providing feedback on whether the setup is successful
and ready for documentation work.

By following these steps, you have successfully created a Rocky Linux
documentation environment using nvim-rockydocs. This environment is now ready
for you to create, manage, and publish your documentation projects efficiently,
utilizing the powerful features of mkdocs and the convenience of nvim for
editing and managing the documents.


==============================================================================
8. Help                                                       *rockydocs-help*

This plugin includes a built-in help feature to assist users in navigating its
functionalities. For detailed information, you can browse the help
documentation by using the command |rockydocs|. This provides quick access to
guidance on various features and usage tips directly within the environment.
For a more comprehensive overview, you can also refer to the accompanying
`doc/rockydocs.txt` file, which contains additional information and best
practices for utilizing the plugin effectively.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
